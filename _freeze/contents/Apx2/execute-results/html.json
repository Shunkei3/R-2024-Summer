{
  "hash": "bade4c6321fceed1c2026b00648f5fb1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Rmarkdown for making a PDF document\n---\n\n\n\n\nThis section provides a brief introduction to Rmarkdown, a user-friendly and powerful tool for creating dynamic documents. Rmarkdown makes it easy to combine code, text, and output in a single file, allowing you to develop reports, presentations, dashboards, and more. We're creating a PDF document here as an example, but you can apply the same procedure to create an HTML document and other formats. In the next section, we will see how to use Quarto, an upgraded version of R Markdown. Once you know how to use Rmarkdown, you can easily use Quarto.\n\n:::{.solutionbox}\n::::{.solutionbox-header}\n:::: {.solutionbox-icon}\n::::\nBefore Starting\n::::\n:::{.solutionbox-body}\n+ If you have not installed `Rmarkdown` package, install it by running `install.packages(\"rmarkdown\")`.\n+ Make sure that your computer has a LaTeX distribution installed. You can download and install the TinyTeX distribution with the R package [`tinytex`](https://yihui.org/tinytex/). Unlike other LaTex distributions like MacTeX, `tinytex` is a lightweight distribution that only includes the essential packages needed to render R Markdown documents to PDF.\n\n```r\ntinytex::install_tinytex()\n# to uninstall TinyTeX, run\n# tinytex::uninstall_tinytex()\n```\n\n*Reference: \"R Markdown Cookbook\" by Yihui Xie, Christophe Dervieux, and Emily Riederer [[here](https://bookdown.org/yihui/rmarkdown-cookbook/)]*\n:::\n:::\n\n<br>\n\n## 1. Getting Started\n\nFrom top-down of New file icon, crick \"R Markdown\" -> Select \"PDF\" format -> A new Rmarkdown (`.Rmd`) file pops up -> Crick \"Knit\" bottom to run the Rmd file.\n\n:::{.panel-tabset}\n\n### 1.New .Rmd file\n\n![Step 1](z_photos/step1.png){width=80%}\n\n### 2.Select PDF format\n\n![Step 2: You can choose HTML if you want a HTML document.](z_photos/step2.png){width=80%}\n\n### 3.Crick Knit\n\n![Step 3](z_photos/step3.png){width=80%}\n\n### 4.Output\n\n![Step 4](z_photos/step4.png){width=80%}\n\n:::\n\n\n<br>\n\n\n## 2. Basic Coponents of Rmarkdown\n\nAn R Markdown document is divided into three main parts: \n\n+ YAML header\n+ text body\n+ code chunks.\n\nLet's take a closer look at each of these components briefly.\n\n<br>\n\n### YAML Header\n\nThe YAML header is a set of key-value pairs enclosed by `---` at the beginning and end of the document. It contains metadata about the document, such as the title, author, and output format. Here is an example of a YAML header:\n\n```r\n---\ntitle: \"My Document\"\nauthor: \"Your Name\"\ndate: \"2022-10-10\"\noutput: pdf_document\n---\n```\n\nIn the output option, you can specify the output format of the document. For example, `output: pdf_document` will render the document as a PDF file. Other options include `output: html_document` for an HTML file and `word_document` for a Word document. You can further customize the output format by adding additional options. For example, `pdf_document` has options such as `toc` for a table of contents and `number_sections` to number the sections.\n\n```r\n---\ntitle: \"My Document\"\nauthor: \"Your Name\"\ndate: \"2022-10-10\"\noutput:\n  pdf_document:\n    toc: true\n    number_sections: true\n---\n```\n\n<br>\n\n### Markdown Syntax\n\nRamrkdown and Quarto use Markdown syntax to format text. These are just some rules for formatting texts (e.g., how to make a header, how to make a font bold or italic, how to make a list, etc.). Check this document to see the basic Markdown syntax: {{< fa newspaper >}} [Markdown Basics](https://quarto.org/docs/authoring/markdown-basics.html){target=\"_blank\"}..\n\n\n<br>\n\n### Code Chunks\n\nIn R Markdown document, you write R code in a block called a code chunk. It looks like this:\n\n````markdown\n```{r}\nprint(\"Hello, World!\")\n```\n````\n\n<!-- ````markdown\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(\"Hello, World!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Hello, World!\"\n```\n\n\n:::\n:::\n\n\n\n```` -->\n\nThere are many options you can configure for code chunks. For more detailed information about chunk options, please refer to  {{< fa newspaper >}} [this articule](https://yihui.org/knitr/options/){target=\"_blank\"}. Chunk options are specified in the body of a code chunk after `#|` (you can also define chunk options inside the curly braces ````{r}`, but Quarto utilizes #| for setting chunk options. To ensure consistency in syntax between Rmarkdown and Quarto documents, it is advisable to use `#|`).\n\n\nFor example, you can hide the code from the final document by setting `echo: false`:\n\n````markdown\n```{r, summary-pressure}\n#| echo: false\nsummary(pressure)\n```\n````\n\nYou can name the code chunk inside the ````{r}`. This is useful for several reasons. For example, if error happens in the code chunk when rendering the document, you can easily locate the code chunk that caused the error because R Markdown will display the label of the code chunk in the error message. Also, if you want to cross-reference a figure or table in the text, you can use the label of the code chunk^[Cross-referencing is not provided directly within the base rmarkdown package, but is provided as an extension in bookdown (Xie 2023a). For further information, see this document {{< fa newspaper >}} [this document](https://bookdown.org/yihui/rmarkdown-cookbook/cross-ref.html){target=\"_blank\"}].\n\nHere is another example of a code chunk that generates a figure. In this case, the code chunk is labeled `fig-pressure`, and the figure caption is set to \"A figure caption\". The width of the figure is set to 50% of the width of the image container.\n\n````markdown\n```{r, fig-pressure}\n#| fig.cap: \"A figure caption\"\n#| out.width: 50%\n\nplot(pressure)\n```\n````\n\nAlthough the base rmarkdown package does not provide direct support for cross-referencing, if you are using the `bookdown` package and setting `output: bookdown::pdf_document2` or/and `output: bookdown::html_document2` in the YAML header, you can use the make cross-reference figures and tables using the syntax `@ref(type:label)`. For example, if you want to refer to a figure with the label `fig-pressure`, you can refer the figure with `@ref(fig:fig-pressure)`.  **Try it on your Rmarkdown document!**. For more detailed information about cross-referencing, please refer to {{< fa newspaper >}} [this document](https://bookdown.org/yihui/rmarkdown-cookbook/cross-ref.html){target=\"_blank\"}.\n\n<br>\n\n**Global Options**\n\nInstead of manually setting the same chunk options in every code chunk (e.g., figure size), you can configure chunk options globally at the beginning of the document using the `knitr::opts_chunk$set()` function ( `opts_chunk$set()` function of the `knitr` package sets the default options for all code chunks in the document). For example, you can set the default figure size and alignment like this:\n\n````markdown\n```{r, setup}\n#| include: false\n\nknitr::opts_chunk$set(\n  fig.width = 6, \n  fig.height = 4,\n  fig.align = \"center\"\n)\n```\n````\n\n`include: false` means that the code and results associated with this chunk will not be appeared in the output document. Usually this setup chunk is placed at the beginning of the document, right after the YAML header.\n\n::: {.callout-note}\nThis `knitr::opts_chunk$set()` is unique to Rmarkdown. In Quarto, you can set the default options for all code chunks in the document under `execute` field in the YAML header. We will see this in the Quarto section. \n:::\n\n\n<br>\n\n\n:::{.solutionbox}\n::::{.solutionbox-header}\n:::: {.solutionbox-icon}\n::::\nTemplate Rmarkdown file for PDF format\n::::\n:::{.solutionbox-body}\n{{< fa file >}} [This](https://github.com/Shunkei3/R-slides/blob/main/z_doc/template_for_pdf.Rmd) is an example of an Rmarkdown file used to create a PDF document. The produced PDF file looks like {{< fa file >}} [this](https://shunkei3.github.io/R-slides/z_doc/template_for_pdf.pdf){target=\"_blank\"}. In this document, I also demonstrated how to use cross-referencing in the text. You can copy this file and modify it to suit your needs!\n\n:::\n:::\n\n\n<br>\n\n:::{.stopthinkbox}\n::::{.stopthinkbox-header}\n:::: {.stopthinkbox-icon}\n::::\nTips: How to display output of code in the cosole pane, not in the R markdown document?\n::::\n:::{.stopthinkbox-body}\n\nBy default, RStudio enables inline output (Notebook mode) on all R Markdown documents. This means that if you run a code chunk in R markdown on R studio, all the output, including the figure, is displayed below the end of the code chunk you just run (See the picture below). While this feature lets you interact with any R Markdown like a notebook, sometimes it is inconvenient, especially if you have a large code chunk. You can turn off this feature and display the code output in the console pane like in the usual R script (I had been bothered for long time until I found this solution.) Go to the gear button in the editor toolbar, and choose “Chunk Output in Console.” You will see that the `chunk_output_type` option is added to the YAML header of your R Markdown document.\n\n```r\neditor_options:\n  chunk_output_type: console\n```\n\n<br>\n\n:::{.panel-tabset}\n\n### Notebook mode (Default)\n![Rmarkdown: inline output (Notebook mode)](z_photos/notebook-demo.png){width=60%}\n\n### How to desable Notebook mode?\n\nChoose \"**Chunk Output in Console**\". \n\n![How to disable inline output (Notebook mode)](z_photos/notebook-console.png){width=60%}\n\n:::\n\n*Reference: [Section 3.2 Notebook](https://bookdown.org/yihui/rmarkdown/notebook.html#creating_a_notebook) in \"R Markdown: The Definitive Guide\" by Yihui Xie, J. J. Allaire, Garrett Grolemund*\n:::\n:::\n\n\n<br>\n\n\n## 3. Summary\n\n+ I hope you now have a better understanding of how to use Rmarkdown. The trickiest part might be setting up the YAML header and code chunk options. But don't worry! You can always start with a template and modify it to fit your needs.\n\n+ Check this official website for Rmarkdown for more detailed information: {{< fa newspaper >}} [R Markdown Introduction](https://rmarkdown.rstudio.com/lesson-1.html).",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}